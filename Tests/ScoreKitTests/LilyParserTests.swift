import XCTest
@testable import ScoreKit

final class LilyParserTests: XCTestCase {
    func testParseSimple() {
        let src = """
        % Generated by ScoreKit
        { c'4 d'4 e'4 r4 }
        """
        let evs = LilyParser.parse(source: src)
        XCTAssertEqual(evs.count, 4)
        if case let .note(p, d) = evs[0].base { XCTAssertEqual(p.step, .C); XCTAssertEqual(p.octave, 4); XCTAssertEqual(d.den, 4) } else { XCTFail() }
        if case let .rest(d) = evs[3].base { XCTAssertEqual(d.den, 4) } else { XCTFail() }
    }

    func testRoundTripSubset() {
        let base: [NotatedEvent] = [
            .init(base: .note(pitch: Pitch(step: .C, alter: 0, octave: 4), duration: Duration(1,8)), articulations: [.marcato], hairpinStart: .crescendo),
            .init(base: .note(pitch: Pitch(step: .D, alter: 0, octave: 4), duration: Duration(1,8)), slurStart: true, articulations: [.staccato, .tenuto]),
            .init(base: .note(pitch: Pitch(step: .E, alter: 0, octave: 4), duration: Duration(1,8)), slurEnd: true, hairpinEnd: true, tieStart: true, dynamic: .mf),
            .init(base: .note(pitch: Pitch(step: .E, alter: 0, octave: 4), duration: Duration(1,8)), tieEnd: true),
            .init(base: .rest(duration: Duration(1,4)))
        ]
        let ly = LilyEmitter.emit(notated: base, title: "RoundTrip")
        let parsed = LilyParser.parse(source: ly)
        let ly2 = LilyEmitter.emit(notated: parsed, title: "RoundTrip")
        XCTAssertTrue(sanitize(ly).contains("c'8"))
        XCTAssertTrue(sanitize(ly2).contains("c'8"))
        XCTAssertTrue(sanitize(ly2).contains("\\mf"))
        XCTAssertTrue(ly.contains("-^"))
        XCTAssertTrue(ly.contains("-_"))
        XCTAssertTrue(ly.contains("~"))
    }

    private func sanitize(_ s: String) -> String {
        return s.replacingOccurrences(of: "\\n", with: " ")
            .replacingOccurrences(of: "\\header", with: "")
            .replacingOccurrences(of: "{", with: "")
            .replacingOccurrences(of: "}", with: "")
    }
}
